AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Back-end service for the Momento Pizza App

Parameters:  
  MomentoApiToken:
    Type: String
    Description: API token for Momento Cache
    NoEcho: true
    Default: ''  

Globals:
  Function:
    Runtime: nodejs18.x 
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 3
    MemorySize: 1024
    Handler: index.handler
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:12
      - !Ref DependencyLayer
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        SECRET_ID: !Ref MomentoSecret
  Api:
    Cors:
      AllowMethods: "'POST,GET,PUT,OPTIONS'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"

Resources:
  OrderApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./order-openapi.yaml

  AdminApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./admin-openapi.yaml

  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: nodejs18.x
    Properties:
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs18.x

  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST      
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: creator
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: type
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: creator
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
# Uncomment the below lines to enable Streams on our DynamoDB table.
#      StreamSpecification:
#        StreamViewType: NEW_AND_OLD_IMAGES

# Uncomment the lines below to define our stream processing Lambda function.
#  StreamHandlerFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: functions/stream-handler/
#      Policies:
#        - AWSLambdaBasicExecutionRole
#        - Version: 2012-10-17
#          Statement:
#            - Effect: Allow
#              Action:
#                - dynamodb:DescribeStream
#                - dynamodb:GetRecords
#                - dynamodb:GetShardIterator
#                - dynamodb:ListStreams
#              Resource: !Sub ${OrderTable.Arn}/stream/*
#            - Effect: Allow
#              Action:
#                - secretsmanager:GetSecretValue
#              Resource: !Ref MomentoSecret
#
# Uncomment the lines below to enable DynamoDB Streams on our table.
#  OrderTableStream:
#    Type: AWS::Lambda::EventSourceMapping
#    Properties:
#      EventSourceArn: !GetAtt OrderTable.StreamArn
#      FunctionName: !GetAtt StreamHandlerFunction.Arn
#      StartingPosition: TRIM_HORIZON
#      BatchSize: 1
#
# Uncomment the lines below to enable the Token Vending Machine.
#  TokenVendingMachineFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: functions/token-vending-machine
#      Policies:
#        - AWSLambdaBasicExecutionRole
#        - Version: 2012-10-17
#          Statement:            
#            - Effect: Allow
#              Action:
#                - secretsmanager:GetSecretValue
#              Resource: !Ref MomentoSecret
#      Events:
#        AdminApi:
#          Type: Api
#          Properties:
#            RestApiId: !Ref AdminApi
#            Path: /tokens
#            Method: GET
#        OrderApi:
#          Type: Api
#          Properties:
#            RestApiId: !Ref OrderApi
#            Path: /tokens
#            Method: GET

  MomentoSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString:
        Fn::Sub:
          - |-
            {            
              "momento": "${MomentoApiToken}"
            }
          - MomentoApiToken: !Ref MomentoApiToken

  # Order Api Functions
  AddOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/add-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders
            Method: POST

  GetMyOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-my-orders
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${OrderTable.Arn}/index/type
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders
            Method: GET

  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt OrderTable.Arn
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
          RESTRICT_TO_CREATOR: true
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders/{orderId}
            Method: GET

  UpdateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:UpdateItem
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders/{orderId}
            Method: PUT

  SubmitOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/submit-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders/{orderId}/statuses
            Method: POST

  # Admin Api Functions
  GetAllOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-all-orders
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${OrderTable.Arn}/index/type
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /orders
            Method: GET

  UpdateOrderStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update-order-status
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /orders/{orderId}/statuses
            Method: POST
        
  AdminGetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt OrderTable.Arn
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
          RESTRICT_TO_CREATOR: false
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /orders/{orderId}
            Method: GET

  # Load Generator
  GenerateOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: load-generator/functions/generate-orders
      Policies:
        - AWSLambdaBasicExecutionRole

  SendRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: load-generator/functions/send-request
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole

  GeneratorStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:      
      DefinitionUri: load-generator/workflows/generator.asl.json
      DefinitionSubstitutions:
        SFNStartSyncExecution: !Sub arn:${AWS::Partition}:states:::states:startExecution.sync:2
        OrderWorkflow: !Ref OrderWorkflowStateMachine
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref OrderWorkflowStateMachine
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StopExecution
              Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${OrderWorkflowStateMachine.Name}:*
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
      Events:
        StartEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Load Generator
              source:
                - momento.pizza      

  OrderWorkflowStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:      
      DefinitionUri: load-generator/workflows/order-workflow.asl.json
      DefinitionSubstitutions:
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GenerateOrders: !GetAtt GenerateOrdersFunction.Arn
        SendRequest: !GetAtt SendRequestFunction.Arn
        OrderApiBaseUrl: !Sub https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/dev
        AdminApiBaseUrl: !Sub https://${AdminApi}.execute-api.${AWS::Region}.amazonaws.com/dev
        DynamoDbDeleteItem: !Sub arn:${AWS::Partition}:states:::dynamodb:deleteItem
        TableName: !Ref OrderTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt GenerateOrdersFunction.Arn
                - !GetAtt SendRequestFunction.Arn
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !GetAtt OrderTable.Arn
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"       
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt OrderWorkflowLogGroup.Arn

  OrderWorkflowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  # Monitoring Dashboard
  LatencyDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: MomentoPizza
      DashboardBody: 
        Fn::Sub: 
          - |-
            {
                "widgets": [
                    {
                        "height": 15,
                        "width": 14,
                        "y": 0,
                        "x": 10,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ "Momento", "get-all-orders-latency-ddb", "service", "pizza-tracker", { "label": "get-all-orders-ddb", "region": "${AWS::Region}" } ],
                                [ ".", "get-all-orders-latency-cache", ".", ".", { "label": "get-all-orders-cache", "region": "${AWS::Region}" } ],
                                [ ".", "get-my-orders-latency-ddb", ".", ".", { "label": "get-my-orders-ddb", "region": "${AWS::Region}" } ],
                                [ ".", "get-my-orders-latency-cache", ".", ".", { "label": "get-my-orders-cache", "region": "${AWS::Region}" } ],
                                [ ".", "get-order-latency-ddb", ".", ".", { "region": "${AWS::Region}", "label": "get-order-ddb" } ],
                                [ ".", "get-order-latency-cache", ".", ".", { "region": "${AWS::Region}", "label": "get-order-cache" } ]
                            ],
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Average",
                            "period": 60,
                            "title": "Avg Latency",
                            "start": "-PT10M",
                            "end": "P0D"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 10,
                        "x": 0,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ "Momento", "get-all-orders-latency-ddb", "service", "pizza-tracker", { "region": "${AWS::Region}", "label": "get-all-orders-ddb Avg" } ],
                                [ ".", "get-all-orders-latency-cache", ".", ".", { "region": "${AWS::Region}", "label": "get-all-orders-cache Avg" } ],
                                [ ".", "get-all-orders-latency-ddb", ".", ".", { "region": "${AWS::Region}", "stat": "p99", "label": "get-all-orders-ddb p99", "color": "#ff7f0e" } ],
                                [ ".", "get-all-orders-latency-cache", ".", ".", { "region": "${AWS::Region}", "stat": "p99", "label": "get-all-orders-cache p99", "color": "#2ca02c" } ]
                            ],
                            "sparkline": false,
                            "view": "singleValue",
                            "region": "${AWS::Region}",
                            "title": "GetAllOrders Latency",
                            "period": 300,
                            "stat": "Average",
                            "setPeriodToTimeRange": false,
                            "trend": true,
                            "liveData": false
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 5,
                        "x": 0,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ "Momento", "get-my-orders-latency-ddb", "service", "pizza-tracker", { "region": "${AWS::Region}", "label": "get-my-orders-ddb Avg", "color": "#9467bd" } ],
                                [ ".", "get-my-orders-latency-cache", ".", ".", { "region": "${AWS::Region}", "label": "get-my-orders-cache Avg", "color": "#8c564b" } ],
                                [ ".", "get-my-orders-latency-ddb", ".", ".", { "region": "${AWS::Region}", "stat": "p99", "label": "get-my-orders-ddb p99" } ],
                                [ ".", "get-my-orders-latency-cache", ".", ".", { "region": "${AWS::Region}", "stat": "p99", "label": "get-my-orders-cache p99" } ]
                            ],
                            "sparkline": false,
                            "view": "singleValue",
                            "region": "${AWS::Region}",
                            "title": "GetMyOrders Latency",
                            "period": 300,
                            "stat": "Average",
                            "setPeriodToTimeRange": true,
                            "trend": false,
                            "liveData": false
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 0,
                        "x": 0,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ "Momento", "get-order-latency-ddb", "service", "pizza-tracker", { "region": "${AWS::Region}", "label": "get-order-ddb Avg", "color": "#7f7f7f" } ],
                                [ ".", "get-order-latency-cache", ".", ".", { "region": "${AWS::Region}", "label": "get-order-cache Avg", "color": "#bcbd22" } ],
                                [ ".", "get-order-latency-ddb", ".", ".", { "region": "${AWS::Region}", "stat": "p99", "label": "get-order-ddb p99", "color": "#7f7f7f" } ],
                                [ ".", "get-order-latency-cache", ".", ".", { "region": "${AWS::Region}", "stat": "p99", "label": "get-order-cache p99", "color": "#bcbd22" } ]
                            ],
                            "sparkline": false,
                            "view": "singleValue",
                            "region": "${AWS::Region}",
                            "title": "GetOrder Latency",
                            "period": 300,
                            "stat": "Average",
                            "setPeriodToTimeRange": true,
                            "trend": false,
                            "liveData": false
                        }
                    },
                    {
                        "height": 15,
                        "width": 4,
                        "y": 0,
                        "x": 6,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ { "expression": "FILL(m4,REPEAT)*100/(FILL(m1,REPEAT)+FILL(m4,REPEAT))", "label": "get-order", "id": "e1", "region": "${AWS::Region}", "period": 900 } ],
                                [ { "expression": "FILL(m6,REPEAT)*100/(FILL(m2,REPEAT)+FILL(m6,REPEAT))", "label": "get-my-orders", "id": "e2", "region": "${AWS::Region}", "period": 900 } ],
                                [ { "expression": "FILL(m5,REPEAT)*100/(FILL(m3,REPEAT)+FILL(m5,REPEAT))", "label": "get-all-orders", "id": "e3", "region": "${AWS::Region}", "period": 900 } ],
                                [ "Momento", "get-order-cache-miss", "service", "pizza-tracker", { "region": "${AWS::Region}", "id": "m1", "visible": false } ],
                                [ ".", "get-my-orders-cache-miss", ".", ".", { "region": "${AWS::Region}", "id": "m2", "visible": false } ],
                                [ ".", "get-all-orders-cache-miss", ".", ".", { "region": "${AWS::Region}", "id": "m3", "visible": false } ],
                                [ ".", "get-order-cache-hit", ".", ".", { "region": "${AWS::Region}", "id": "m4", "visible": false } ],
                                [ ".", "get-all-orders-cache-hit", ".", ".", { "region": "${AWS::Region}", "id": "m5", "visible": false } ],
                                [ ".", "get-my-orders-cache-hit", ".", ".", { "region": "${AWS::Region}", "id": "m6", "visible": false } ]
                            ],
                            "sparkline": false,
                            "view": "gauge",
                            "region": "${AWS::Region}",
                            "title": "Cache Hit Rates",
                            "period": 900,
                            "stat": "SampleCount",
                            "legend": {
                                "position": "bottom"
                            },
                            "yAxis": {
                                "left": {
                                    "min": 0,
                                    "max": 100
                                }
                            },
                            "setPeriodToTimeRange": false,
                            "trend": true
                        }
                    }
                ]
            }
          - region: !Ref AWS::Region

Outputs:
  OrderApiEndpoint:
    Description: Copy and paste this value in ./order-ui/next.config.js into the NEXT_PUBLIC_ORDER_API property
    Value: !Sub "https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
  AdminApiEndpoint:
    Description: Copy and paste this value in ./admin-ui/next.config.js into the NEXT_PUBLIC_ADMIN_API property
    Value: !Sub "https://${AdminApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
