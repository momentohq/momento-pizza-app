AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Back-end service for the Momento Pizza App

Parameters:  
  MomentoApiToken:
    Type: String
    Description: API token for Momento Cache
    NoEcho: true
    Default: ''  

Globals:
  Function:
    Runtime: nodejs18.x 
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 3
    MemorySize: 1024
    Handler: index.handler
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:12
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  Api:
    Cors:
      AllowMethods: "'POST,GET,PUT,OPTIONS'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"

Resources:
  OrderApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./order-openapi.yaml

  AdminApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./admin-openapi.yaml

  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST      
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: creator
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: type
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: creator
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Order Api Functions
  AddOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/add-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:BatchWriteItem
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders
            Method: POST

  GetMyOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-my-orders
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${OrderTable.Arn}/index/type
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders
            Method: GET

  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
          RESTRICT_TO_CREATOR: true
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders/{orderId}
            Method: GET

  UpdateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:UpdateItem
                - dynamodb:BatchWriteItem
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders/{orderId}
            Method: PUT

  SubmitOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/submit-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /orders/{orderId}/statuses
            Method: POST

  # Admin Api Functions
  GetAllOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-all-orders
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${OrderTable.Arn}/index/type
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /orders
            Method: GET

  UpdateOrderStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update-order-status
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /orders/{orderId}/statuses
            Method: POST
        
  AdminGetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-order
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !GetAtt OrderTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable
          RESTRICT_TO_CREATOR: false
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /orders/{orderId}
            Method: GET

  # Monitoring Dashboard
  LatencyDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: MomentoPizza
      DashboardBody: 
        Fn::Sub: 
          - |-
            {
              "widgets": [
                {
                  "type": "metric",
                  "x": 0,
                  "y": 0,
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "metrics": [                      
                      [ "Momento", "get-order-latency", "service", "pizza-tracker" ],
                      [ ".", "get-my-orders-latency", ".", "." ],
                      [ ".", "get-all-orders-latency", ".", "." ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${region}",
                    "stat": "Average",
                    "period": 1,
                    "title": "Latency Metrics"
                  }
                }
              ]
            }
          - region: !Ref AWS::Region

Outputs:
  OrderApiEndpoint:
    Description: Full url for the Order API
    Value: !Sub "https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
  AdminApiEndpoint:
    Description: Full url for the Admin API
    Value: !Sub "https://${AdminApi}.execute-api.${AWS::Region}.amazonaws.com/dev"