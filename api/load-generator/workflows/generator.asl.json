{
  "Comment": "Random load generator for the pizza admin app",
  "StartAt": "Was numRuns Provided?",
  "States": {
    "Was numRuns Provided?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.numRuns",
          "IsPresent": true,
          "Next": "Initialize Counter"
        }
      ],
      "Default": "Was It In The Event?"
    },
    "Was It In The Event?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.detail.numRuns",
          "IsPresent": true,
          "Next": "Set numRuns From Event"
        }
      ],
      "Default": "Set numRuns to One"
    },
    "Set numRuns From Event": {
      "Type": "Pass",
      "Parameters": {
        "numRuns.$": "$.detail.numRuns"
      },
      "Next": "Initialize Counter"
    },
    "Set numRuns to One": {
      "Type": "Pass",
      "Next": "Initialize Counter",
      "Parameters": {
        "numRuns": 1
      }
    },
    "Initialize Counter": {
      "Type": "Pass",
      "Next": "More Iterations?",
      "Parameters": {
        "numRuns.$": "$.numRuns",
        "count": 0
      }
    },
    "More Iterations?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.count",
          "NumericLessThanPath": "$.numRuns",
          "Next": "Generate Iteration Array"
        }
      ],
      "Default": "Success"
    },
    "Generate Iteration Array": {
      "Type": "Pass",
      "Next": "Run Iteration",
      "Parameters": {
        "numRuns.$": "$.numRuns",
        "count.$": "$.count",
        "iterations": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
      }
    },
    "Run Iteration": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Generate Orders",
        "States": {
          "Generate Orders": {
            "Type": "Task",
            "Resource": "${LambdaInvoke}",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "${GenerateOrders}",
              "Payload": {
                "numOrders.$": "States.MathRandom(3, 8)"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "Create Orders"
          },
          "Create Orders": {
            "Type": "Map",
            "ItemProcessor": {
              "ProcessorConfig": {
                "Mode": "INLINE"
              },
              "StartAt": "Create Order",
              "States": {
                "Create Order": {
                  "Type": "Task",
                  "Resource": "${LambdaInvoke}",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "FunctionName": "${SendRequest}",
                    "Payload": {
                      "request": {
                        "method": "POST",
                        "baseUrl": "${OrderApiBaseUrl}/orders",
                        "body.$": "$.order"
                      }
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "Wait"
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 1,
                  "Next": "Get Order"
                },
                "Get Order": {
                  "Type": "Task",
                  "Resource": "${LambdaInvoke}",
                  "Parameters": {
                    "FunctionName": "${SendRequest}",
                    "Payload": {
                      "request": {
                        "method": "GET",
                        "baseUrl.$": "States.Format('${AdminApiBaseUrl}/orders/{}', $.id)"
                      },
                      "iterations.$": 10
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "ResultPath": null,
                  "End": true
                }
              }
            },
            "ItemsPath": "$.orders",
            "ItemSelector": {
              "order.$": "$$.Map.Item.Value"
            },
            "ResultPath": "$.orderIds",
            "Next": "Get All Orders",
            "OutputPath": "$.orderIds"
          },
          "Get All Orders": {
            "Type": "Parallel",
            "Branches": [
              {
                "StartAt": "Get My Orders",
                "States": {
                  "Get My Orders": {
                    "Type": "Task",
                    "Resource": "${LambdaInvoke}",
                    "Parameters": {
                      "FunctionName": "${SendRequest}",
                      "Payload": {
                        "request": {
                          "method": "GET",
                          "baseUrl": "${OrderApiBaseUrl}/orders"
                        }
                      }
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 6,
                        "BackoffRate": 2
                      }
                    ],
                    "ResultPath": null,
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Admin - Get All Orders",
                "States": {
                  "Admin - Get All Orders": {
                    "Type": "Task",
                    "Resource": "${LambdaInvoke}",
                    "Parameters": {
                      "FunctionName": "${SendRequest}",
                      "Payload": {
                        "request": {
                          "method": "GET",
                          "baseUrl": "${AdminApiBaseUrl}/orders"
                        }
                      }
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 6,
                        "BackoffRate": 2
                      }
                    ],
                    "End": true,
                    "ResultPath": null
                  }
                }
              }
            ],
            "ResultPath": null,
            "Next": "Delete Generated Orders"
          },
          "Delete Generated Orders": {
            "Type": "Map",
            "ItemProcessor": {
              "ProcessorConfig": {
                "Mode": "INLINE"
              },
              "StartAt": "Delete Order",
              "States": {
                "Delete Order": {
                  "Type": "Task",
                  "Resource": "${LambdaInvoke}",
                  "Parameters": {
                    "FunctionName": "${DeleteOrder}",
                    "Payload": {
                      "orderId.$": "$.id"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "End": true,
                  "ResultPath": null
                }
              }
            },
            "End": true
          }
        }
      },
      "ItemsPath": "$.iterations",
      "MaxConcurrency": 10,
      "Next": "Increment Run Counter",
      "ResultPath": null
    },
    "Increment Run Counter": {
      "Type": "Pass",
      "Next": "More Iterations?",
      "Parameters": {
        "numRuns.$": "$.numRuns",
        "count.$": "States.MathAdd($.count, 1)"
      }
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}