{
  "Comment": "Runs a business process workflow for placing an order",
  "StartAt": "Generate Orders",
  "States": {
    "Generate Orders": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "${GenerateOrders}",
        "Payload": {
          "numOrders.$": "States.MathRandom(1,6)"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Create Orders"
    },
    "Create Orders": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Create Order",
        "States": {
          "Create Order": {
            "Type": "Task",
            "Resource": "${LambdaInvoke}",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "${SendRequest}",
              "Payload": {
                "request": {
                  "method": "POST",
                  "baseUrl": "${OrderApiBaseUrl}/orders",
                  "body.$": "$.order"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "Wait"
          },
          "Wait": {
            "Type": "Wait",
            "Seconds": 1,
            "Next": "Get Order"
          },
          "Get Order": {
            "Type": "Task",
            "Resource": "${LambdaInvoke}",
            "Parameters": {
              "FunctionName": "${SendRequest}",
              "Payload": {
                "request": {
                  "method": "GET",
                  "baseUrl.$": "States.Format('${AdminApiBaseUrl}/orders/{}', $.id)"
                },
                "iterations": 4
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "ResultPath": null,
            "End": true
          }
        }
      },
      "ItemsPath": "$.orders",
      "ItemSelector": {
        "order.$": "$$.Map.Item.Value"
      },
      "ResultPath": "$.orderIds",
      "Next": "Get All Orders",
      "OutputPath": "$.orderIds"
    },
    "Get All Orders": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get My Orders",
          "States": {
            "Get My Orders": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "Parameters": {
                "FunctionName": "${SendRequest}",
                "Payload": {
                  "request": {
                    "method": "GET",
                    "baseUrl": "${OrderApiBaseUrl}/orders"
                  },
                  "iterations": 10,
                  "discardResults": true
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": null,
              "End": true
            }
          }
        },
        {
          "StartAt": "Admin - Get All Orders",
          "States": {
            "Admin - Get All Orders": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "Parameters": {
                "FunctionName": "${SendRequest}",
                "Payload": {
                  "request": {
                    "method": "GET",
                    "baseUrl": "${AdminApiBaseUrl}/orders"
                  },
                  "iterations": 10,
                  "discardResults": true
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true,
              "ResultPath": null
            }
          }
        }
      ],
      "ResultPath": null,
      "Next": "Delete Generated Orders"
    },
    "Delete Generated Orders": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Delete Order",
        "States": {
          "Delete Order": {
            "Type": "Task",
            "Resource": "${DynamoDbDeleteItem}",
            "Parameters": {
              "TableName": "${TableName}",
              "Key": {
                "pk": {
                  "S.$": "$.id"
                },
                "sk": {
                  "S": "metadata"
                }
              }
            },
            "End": true
          }
        }
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}